name: Reusable Terraform Plan

on:
  workflow_call:
    inputs:
      environment_name:
        description: "Environment name for gating (e.g. dev-plan or prod-plan)"
        required: true
        type: string
      plan_filename:
        description: "Name of the .tfplan file"
        required: true
        type: string
      artifact_name:
        description: "Name of the plan artifact (e.g. terraform-prod-plan)"
        required: true
        type: string
      tfstate_key:
        description: "Backend state file key (e.g. branch-based-reusable-workflows.tfstate)"
        required: true
        type: string
      checkout_ref:
        description: "Git ref/sha to check out"
        required: true
        type: string
      is_pr:
        description: "Whether the original event is a PR"
        required: false
        type: boolean
        default: false

jobs:
  plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment_name }}
    outputs:
      tfplan_exitcode: ${{ steps.tf-plan.outputs.exitcode }}
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_USE_OIDC: "true"
      ARM_SKIP_PROVIDER_REGISTRATION: "true"
      TF_VAR_env: ${{ inputs.environment_name }}
    steps:
      - name: Check out code
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.checkout_ref }}
          fetch-depth: 0

      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.6
          terraform_wrapper: false

      - name: Terraform Init
        working-directory: terraform
        run: |
          terraform init \
            -backend-config="container_name=${{ vars.TFSTATE_CONTAINER_NAME }}" \
            -backend-config="key=${{ inputs.tfstate_key }}"

      - name: Terraform Plan
        id: tf-plan
        working-directory: terraform
        shell: bash
        run: |
          exitcode=0
          terraform plan -detailed-exitcode -no-color -out=${{ inputs.plan_filename }} || exitcode=$?
          echo "exitcode=$exitcode" >> $GITHUB_OUTPUT
          echo "Terraform plan exit code: $exitcode"   # Prints to logs

          if [ $exitcode -eq 1 ]; then
            echo "Terraform Plan Failed!"
            exit 1
          fi
          # exitcode=0 => no changes, exitcode=2 => changes present

      - name: Upload Plan Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.artifact_name }}
          path: terraform/${{ inputs.plan_filename }}
      - name: Create Plan String
        id: planstring
        if: always()  # or you can condition this on a successful plan
        working-directory: terraform
        run: |
          # We capture the plan details
          PLAN_CONTENT=$(terraform show -no-color ${{ inputs.plan_filename }})
          # Generate a random delimiter to properly set multi-line output
          delimiter="$(openssl rand -hex 8)"

          echo "summary<<${delimiter}" >> $GITHUB_OUTPUT
          echo "## Terraform Plan Output (${{ inputs.environment_name }})" >> $GITHUB_OUTPUT
          echo "<details><summary>Click to expand</summary>" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo '```terraform' >> $GITHUB_OUTPUT
          echo "$PLAN_CONTENT" >> $GITHUB_OUTPUT
          echo '```' >> $GITHUB_OUTPUT
          echo "</details>" >> $GITHUB_OUTPUT
          echo "${delimiter}" >> $GITHUB_OUTPUT
  
      - name: Publish Plan to Task Summary
        if: always()
        env:
          SUMMARY: ${{ steps.planstring.outputs.summary }}
        run: echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY

      - name: Post Plan to PR (if PR event)
        if: ${{ inputs.is_pr == 'true' }}
        uses: actions/github-script@v7
        env:
          SUMMARY: ${{ steps.planstring.outputs.summary }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const body = process.env.SUMMARY;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });
# print the exit code from the outputs
  debug:
    name: Debug
    runs-on: ubuntu-latest
    needs: [plan]
    steps:
      - name: Debug
        run: |
          echo "Plan exit code: ${{ needs.plan.outputs.tfplan_exitcode }}"
